name: Reusable Slack Review Notifications Workflow

on:
  workflow_call:
    inputs:
      pull_request_number:
        required: true
        type: string

concurrency:
  group: pr-${{ inputs.pull_request_number }}-${{ github.workflow }}
  cancel-in-progress: true

jobs:
  send_notification:
    name: Ping Reviewer(s)
    runs-on: ubuntu-latest
    steps:
      - name: Delay Step
        run: sleep 20
        # Delay to ensure GitHub API has processed all events

      - name: Get Current PR
        id: get_pr
        uses: 8BitJonny/gh-get-current-pr@3.0.0
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          sha: ${{ github.event.pull_request.head.sha }}

      - name: Send Slack Notification
        if: ${{ !contains(steps.get_pr.outputs.pr_labels, 'hotfix') }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL_DEVELOPER_NOTIFICATIONS }}
          PR_OBJECT: ${{ steps.get_pr.outputs.pr }}
          GITHUB_ACTOR: ${{ github.actor }}
          PR_URL: ${{ steps.get_pr.outputs.pr_url }}
          PR_NUMBER: ${{ steps.get_pr.outputs.number }}
          GITHUB_EVENT_NAME: ${{ github.event_name }}
          GITHUB_EVENT_ACTION: ${{ github.event.action }}
          GITHUB_EVENT_REVIEW_STATE: ${{ github.event.review.state }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # Note: We intentionally do not pass GITHUB_TOKEN or GITHUB_REPOSITORY here.
        shell: python
        run: |
          import os, json, requests
          # Removing unused imports
          # from datetime import datetime, timedelta

          ###########################################
          # Setup and Environment Variable Parsing
          ###########################################
          
          # Parse basic environment variables
          pr_object = json.loads(os.getenv('PR_OBJECT', '{}'))
          event_name = os.getenv('GITHUB_EVENT_NAME')
          event_action = os.getenv('GITHUB_EVENT_ACTION')
          actor = os.getenv('GITHUB_ACTOR')
          pr_url = os.getenv('PR_URL')
          pr_number = os.getenv('PR_NUMBER')

          ###########################################
          # User Mapping Configuration
          ###########################################
          
          # Mapping from GitHub username to Slack user ID
          user_map = {
              'StuartH1': 'U067BG3JC1K',
              'jake94a': 'U03CVABRQNN',
              'zenzenzen': 'U04119RP19C',
          }

          ###########################################
          # Helper Functions
          ###########################################
          
          def send_slack(message: str) -> None:
              """Send a message to the configured Slack webhook."""
              payload = {
                  'text': message,
                  'username': 'GitHub Actions',
                  'icon_emoji': ':octocat:',
              }
              webhook_url = os.getenv('SLACK_J_DM_URL')
              if webhook_url:
                  requests.post(webhook_url, json=payload)

          notification_sent = False

          ###########################################
          # Review Request Event Handler
          ###########################################
          
          if event_name == 'pull_request' and event_action == 'review_requested':
              reviewers = pr_object.get('requested_reviewers', [])
              
              ###########################################
              # Enhanced Notification for Addressed Changes
              ###########################################
              
              # Optionally attempt to enhance notifications if a GitHub token is available.
              github_token = os.getenv('GITHUB_TOKEN', '')
              # GITHUB_REPOSITORY is automatically available on the runner.
              repo = os.getenv('GITHUB_REPOSITORY', '')
              
              if github_token and repo and pr_number:
                  try:
                      # Fetch review history to check if this is a re-review after changes requested
                      api_headers = {
                          'Authorization': f'token {github_token}',
                          'Accept': 'application/vnd.github.v3+json'
                      }
                      reviews_url = f'https://api.github.com/repos/{repo}/pulls/{pr_number}/reviews'
                      reviews_response = requests.get(reviews_url, headers=api_headers)
                      
                      if reviews_response.status_code == 200:
                          reviews = reviews_response.json()
                          
                          # Group reviews by reviewer for easier processing
                          reviewer_history = {}
                          for review in reviews:
                              login = review.get('user', {}).get('login')
                              if login:
                                  reviewer_history.setdefault(login, []).append(review)
                          
                          # Identify reviewers who previously requested changes
                          changes_addressed_reviewers = []
                          for reviewer in reviewers:
                              login = reviewer.get('login')
                              if login in reviewer_history:
                                  # Get the most recent review for this user.
                                  last_review = sorted(
                                      reviewer_history[login],
                                      key=lambda r: r.get('submitted_at', ''),
                                      reverse=True
                                  )[0]
                                  if last_review.get('state') == 'CHANGES_REQUESTED':
                                      changes_addressed_reviewers.append(login)
                          
                          # Send notification for addressed changes
                          if changes_addressed_reviewers:
                              mentions = ' '.join(
                                  f"<@{user_map[login]}>" for login in changes_addressed_reviewers if login in user_map
                              )
                              if mentions:
                                  message = f"{mentions} *{actor}* has addressed your requested changes and re-requested your review on <{pr_url}|PR #{pr_number}>."
                                  send_slack(message)
                                  notification_sent = True
                  except Exception as e:
                      print(f"Error fetching review history: {e}")

              ###########################################
              # Standard Review Request Notification
              ###########################################
              
              # If no enhanced notification was sent, send the default review request message.
              if not notification_sent:
                  mentions = ' '.join(
                      f"<@{user_map[reviewer.get('login')]}>" for reviewer in reviewers if reviewer.get('login') in user_map
                  )
                  if mentions:
                      message = f"{mentions} *{actor}* requested your review on <{pr_url}|PR #{pr_number}>."
                      send_slack(message)

          ###########################################
          # Changes Requested Event Handler
          ###########################################
          
          elif event_name == 'pull_request_review' and event_action == 'submitted':
              review_state = os.getenv('GITHUB_EVENT_REVIEW_STATE', '')
              reviewer = actor
              
              # Notify PR author when changes are requested
              if review_state.lower() == 'changes_requested' and reviewer in user_map:
                  pr_author = pr_object.get('user', {}).get('login')
                  if pr_author in user_map:
                      message = f"<@{user_map[pr_author]}> *{reviewer}* requested changes on <{pr_url}|PR #{pr_number}>."
                      send_slack(message)

          ###########################################
          # PR Comment Event Handler
          ###########################################
          
          elif event_name == 'pull_request_review_comment' and event_action == 'created':
              commenter = actor
              pr_author = pr_object.get('user', {}).get('login')
              
              # Notify PR author of new comments (unless they commented themselves)
              if pr_author in user_map and pr_author != commenter:
                  message = f"<@{user_map[pr_author]}> *{commenter}* commented on <{pr_url}|PR #{pr_number}>."
                  send_slack(message)