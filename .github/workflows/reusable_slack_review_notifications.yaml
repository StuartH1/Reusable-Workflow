name: Slack Review Notifications Workflow

on:
  pull_request_review:
    types: [submitted]
  pull_request_review_comment:
    types: [created]
  pull_request:
    types: [review_requested]
  issue_comment:
    types: [created]

jobs:
  send_notification:
    name: Ping Reviewer(s)
    runs-on: ubuntu-latest
    steps:
      - name: Delay Step
        run: sleep 20
        # Delay to ensure GitHub API has processed all events

      - name: Get Current PR
        id: get_pr
        uses: 8BitJonny/gh-get-current-pr@3.0.0
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          # For issue_comment events, we need to use a different approach
          # as github.event.issue.pull_request only contains the URL, not the SHA
          sha: ${{ github.event_name != 'issue_comment' && github.event.pull_request.head.sha || '' }}
          # For issue_comment events, we'll use the issue number instead
          issue-number: ${{ github.event_name == 'issue_comment' && github.event.issue.number || '' }}

      - name: Send Slack Notification
        if: ${{ !contains(steps.get_pr.outputs.pr_labels, 'hotfix') }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_J_DM_URL }}
          PR_OBJECT: ${{ steps.get_pr.outputs.pr }}
          GITHUB_ACTOR: ${{ github.actor }}
          PR_URL: ${{ steps.get_pr.outputs.pr_url }}
          PR_NUMBER: ${{ steps.get_pr.outputs.number }}
          GITHUB_EVENT_NAME: ${{ github.event_name }}
          GITHUB_EVENT_ACTION: ${{ github.event.action }}
          GITHUB_EVENT_REVIEW_STATE: ${{ github.event.review.state }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: python
        run: |
          import os, json, requests

          # Parse the PR object from the environment variable
          pr_object = json.loads(os.getenv('PR_OBJECT'))

          # Extract requested reviewers
          reviewers = pr_object.get('requested_reviewers', [])

          # Extract PR author
          pr_author = pr_object.get('user', {}).get('login')

          # Define mapping from GitHub username to Slack user ID
          user_map = {
              'StuartH1': 'U067BG3JC1K',
              'jake94a': 'U03CVABRQNN',
              'zenzenzen': 'U04119RP19C'
          }

          # Construct mentions for reviewers
          mentions = ' '.join([f"<@{user_map[reviewer['login']]}>"
                               for reviewer in reviewers
                               if reviewer['login'] in user_map])
          print("Mentions: ", mentions) 

          # Get author's Slack ID if available
          author_mention = f"<@{user_map[pr_author]}>" if pr_author in user_map else pr_author
          
          # Determine notification type based on GitHub event
          event_name = os.getenv('GITHUB_EVENT_NAME')
          event_action = os.getenv('GITHUB_EVENT_ACTION')
          review_state = os.getenv('GITHUB_EVENT_REVIEW_STATE')
          
          message = ""
          
          if event_name == 'pull_request' and event_action == 'review_requested':
              # Original review request notification
              message = f"{mentions} *{os.getenv('GITHUB_ACTOR')}* requested your review on <{os.getenv('PR_URL')}|PR #{os.getenv('PR_NUMBER')}>."
          
          elif event_name == 'pull_request_review_comment' and event_action == 'created':
              # Inline code comment notification
              message = f"{author_mention} *{os.getenv('GITHUB_ACTOR')}* commented on your code in <{os.getenv('PR_URL')}|PR #{os.getenv('PR_NUMBER')}>."
          
          elif event_name == 'pull_request_review' and event_action == 'submitted':
              if review_state == 'changes_requested':
                  # Changes requested notification for PR author
                  message = f"{author_mention} *{os.getenv('GITHUB_ACTOR')}* requested changes on your <{os.getenv('PR_URL')}|PR #{os.getenv('PR_NUMBER')}>."
              elif review_state == 'approved':
                  # Approval notification for PR author
                  message = f"{author_mention} *{os.getenv('GITHUB_ACTOR')}* approved your <{os.getenv('PR_URL')}|PR #{os.getenv('PR_NUMBER')}>."
              elif review_state == 'commented':
                  # General review comment notification for PR author
                  message = f"{author_mention} *{os.getenv('GITHUB_ACTOR')}* reviewed and commented on your <{os.getenv('PR_URL')}|PR #{os.getenv('PR_NUMBER')}>."
          
          elif event_name == 'issue_comment' and event_action == 'created':
              # PR conversation comment notification for PR author
              message = f"{author_mention} *{os.getenv('GITHUB_ACTOR')}* commented on your PR conversation in <{os.getenv('PR_URL')}|PR #{os.getenv('PR_NUMBER')}>."
          
          # Only send notification if we have a message to send
          if message:
              payload = {
                  'text': message,
                  'username': 'GitHub Actions',
                  'icon_emoji': ':octocat:',
              }
              requests.post(os.getenv('SLACK_WEBHOOK_URL'), json=payload)
          else:
              print("No notification type matched, skipping Slack message")